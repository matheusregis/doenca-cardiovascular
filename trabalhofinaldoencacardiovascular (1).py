# -*- coding: utf-8 -*-
"""TrabalhoFinalDoencaCardiovascular.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DAxi9oulNCeWC4yEbi8qhKVN_YYcq2Kv
"""

from numpy import loadtxt
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from keras.utils import to_categorical
import pandas as pd
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn import metrics

# coração -> https://www.kaggle.com/ronitf/heart-disease-uci
coracao = pd.read_csv("heart.csv")

coracao.head()

coracao['target'].value_counts()

X = coracao.iloc[:,1:13]
y = coracao['target']

print(X.shape)
print(y.shape)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, shuffle=True)

X

model = Sequential()
model.add(Dense(100, input_dim=12, activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(33, activation='relu'))
model.add(Dense(11, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=200, batch_size=100)
print(history.history.keys())
_, accuracy = model.evaluate(X_test, y_test)
print('Accuracy: %.2f' % (accuracy*100))

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Acurácia')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

from sklearn.metrics import confusion_matrix

preds = model.predict_classes(X_test)

cm = confusion_matrix(y_test, preds)
print(cm)
tn, fp, fn, tp = confusion_matrix(y_test, preds).ravel()
print ("True Negative: ", tn)
print ("False Positive: ", fp)
print ("False Negative: ", fn)
print ("True Positive: ", tp)
tpr = tp / (tp + fn)
tnr = tn / (tn + fp)
acc = (tp + tn) / (tp + tn + fp + fn)

print("TPR:", tpr)
print("TNR:", tnr)
print("ACC:", acc)